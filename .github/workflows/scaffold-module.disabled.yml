name: Scaffold Module from Issue

on:
  issues:
    types: [labeled]   # 只在「套上標籤」時觸發

# 同一個 Issue 只保留最新一次執行（避免重覆跑）
concurrency:
  group: module-scaffold-${{ github.event.issue.number }}
  cancel-in-progress: true

permissions:
  contents: write        # 允許 commit / push
  pull-requests: write   # 允許建立 / 合併 PR
  issues: write          # 允許在 Issue 留言

jobs:
  scaffold:
    runs-on: ubuntu-latest

    # 只在該 Issue 真的含有 module-ready 或 module:proposal 標籤時才跑
    if: contains(github.event.issue.labels.*.name, 'module-ready') || contains(github.event.issue.labels.*.name, 'module:proposal')

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install deps (gh 已預裝；此步保留 Node 內建模組使用)
        run: |
          echo "No npm deps needed."

      - name: Ensure modules folder & seed files
        run: |
          mkdir -p modules
          [ -f modules/modules_all.json ] || echo "[]" > modules/modules_all.json
          [ -f modules/modules_core.json ] || echo "[]" > modules/modules_core.json
          [ -f modules/modules_utility.json ] || echo "[]" > modules/modules_utility.json
          [ -f modules/modules_creative.json ] || echo "[]" > modules/modules_creative.json
          [ -f modules/modules_business.json ] || echo "[]" > modules/modules_business.json

      - name: Generate/Update module JSON from issue
        env:
          ISSUE_NUMBER: ${{ github.event.issue.number }}
          ISSUE_TITLE: ${{ github.event.issue.title }}
          ISSUE_BODY: ${{ github.event.issue.body }}
          ISSUE_LABELS: ${{ toJson(github.event.issue.labels.*.name) }}
        run: |
          node scripts/scaffold_module.cjs

      - name: Commit changes (if any)
        run: |
          git config user.name "${GITHUB_ACTOR}"
          git config user.email "${GITHUB_ACTOR}@users.noreply.github.com"
          git add -A
          if git diff --cached --quiet; then
            echo "NO_CHANGES=true" >> $GITHUB_ENV
            echo "No changes to commit."
          else
            git commit -m "chore: scaffold module from issue #${{ github.event.issue.number }}"
          fi

      - name: Create/Update PR
        if: env.NO_CHANGES != 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}
          ISSUE_TITLE: ${{ github.event.issue.title }}
        run: |
          set -e
          BR="scaffold/issue-${ISSUE_NUMBER}"

          # push 分支（存在就更新）
          git push origin HEAD:$BR --force

          # 建立 PR（若已存在則跳過）
          if gh pr view "$BR" >/dev/null 2>&1; then
            echo "PR already exists for $BR"
          else
            gh pr create \
              --title "[Module] ${ISSUE_TITLE}" \
              --body "Auto-generated from issue #${ISSUE_NUMBER}" \
              --base "main" \
              --head "$BR"
          fi

          # 在 Issue 留言 PR 連結
          PR_URL="$(gh pr view "$BR" --json url -q .url)"
          gh issue comment "$ISSUE_NUMBER" --body "已建立 PR：$PR_URL"

      - name: Auto-merge PR (squash)
        if: env.NO_CHANGES != 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}
        run: |
          BR="scaffold/issue-${ISSUE_NUMBER}"
          gh pr merge "$BR" --squash --auto || true
