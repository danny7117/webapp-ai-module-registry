name: Auto Scaffold Module

on:
  issues:
    types: [opened, edited, reopened]   # 允許重新打開/編輯後再次觸發（仍受 if 條件限制）

permissions:
  contents: write    # 允許 commit
  issues: write      # 允許回覆留言、加標籤（如需）

concurrency:
  group: scaffold-${{ github.event.issue.number }}
  cancel-in-progress: false

jobs:
  scaffold:
    # 僅處理帶有「module-proposal」且「module-ready」兩個標籤的 Issue（雙保險）
    if: contains(toJson(github.event.issue.labels.*.name), 'module-proposal')
        && contains(toJson(github.event.issue.labels.*.name), 'module-ready')
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Parse category & slug from Issue
        id: prep
        shell: bash
        run: |
          set -euo pipefail

          TITLE="${{ github.event.issue.title }}"
          BODY="${{ github.event.issue.body }}"

          # 從 body 的 meta 區塊解析 category（/module-proposal 會寫入）
          CATEGORY=$(printf "%s" "$BODY" | awk -F': ' '/^[-*] category:/ {print tolower($2); exit}' | tr -d '\r' | xargs)
          # fallback（若解析不到，直接失敗—交由 Guard 步驟處理）
          if [ -z "${CATEGORY:-}" ]; then CATEGORY=""; fi

          # 產生 slug：以 Issue 標題為基底
          SLUG="$(echo "$TITLE" | tr '[:upper:]' '[:lower:]' | sed -E 's/[^a-z0-9]+/-/g;s/^-+|-+$//g')"

          echo "category=$CATEGORY" >> "$GITHUB_OUTPUT"
          echo "slug=$SLUG" >> "$GITHUB_OUTPUT"
          echo "dir=modules/${CATEGORY}/${SLUG}" >> "$GITHUB_OUTPUT"

      - name: Guard: category must exist
        if: steps.prep.outputs.category == ''
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.issue.number,
              body: "❌ 自動化停止：找不到 `category`。請確認提案內容含有 meta 欄位 `- category: <frontend|integration|ai|utility>` 後再試。"
            });
            // 直接標記一個需要修正的標籤（可選）
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.issue.number,
              labels: ['needs-category']
            });
        # 讓 job 明確失敗結束
        continue-on-error: false

      - name: Idempotent check (skip if exists)
        shell: bash
        run: |
          set -euo pipefail
          if [ -d "${{ steps.prep.outputs.dir }}" ]; then
            echo "Module path exists, skip scaffold: ${{ steps.prep.outputs.dir }}"
            exit 0
          fi

      - name: Scaffold files
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p "${{ steps.prep.outputs.dir }}"

          FILE_JSON="${{ steps.prep.outputs.dir }}/module.json"
          BODY_JSON=$(printf '%s' "${{ github.event.issue.body }}" | jq -R -s '.')

          # 你也可以改寫為 index.ts / README.md 等模板
          cat > "$FILE_JSON" <<EOF
          {
            "name": "${{ github.event.issue.title }}",
            "slug": "${{ steps.prep.outputs.slug }}",
            "category": "${{ steps.prep.outputs.category }}",
            "source": "issue",
            "issue_number": ${{ github.event.issue.number }},
            "createdBy": "${{ github.actor }}",
            "createdAt": "${{ github.event.issue.created_at }}",
            "body": $BODY_JSON
          }
          EOF

      - name: Commit & push
        shell: bash
        run: |
          set -e
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git add modules/
          git commit -m "scaffold: ${{ steps.prep.outputs.category }}/${{ steps.prep.outputs.slug }} from issue #${{ github.event.issue.number }}" || echo "No changes to commit"
          git push

      - name: Comment back (success)
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            const branch = context.payload.repository.default_branch || 'main';
            const category = '${{ steps.prep.outputs.category }}';
            const slug = '${{ steps.prep.outputs.slug }}';
            const url = `https://github.com/${context.repo.owner}/${context.repo.repo}/tree/${branch}/modules/${category}/${slug}`;
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.issue.number,
              body: `✅ 模組已建立：\n- 類別：**${category}**\n- 路徑：\`modules/${category}/${slug}\`\n- 連結：${url}`
            });

      - name: Comment back (failure)
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.issue.number,
              body: "❌ 自動化失敗，請查看此 workflow 的日誌（Actions）。若為路徑已存在，表示此模組先前已建立。"
            });
