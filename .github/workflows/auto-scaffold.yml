name: Scaffold Module from Issue (manual)

on:
  workflow_dispatch:  # 先改成手動，不要自動觸發避免擋住其他 CI
    inputs:
      issue_number:
        description: "Issue number to scaffold from"
        required: true
        type: number

jobs:
  scaffold:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Read issue
        id: issue
        uses: actions/github-script@v7
        with:
          script: |
            const issue_number = Number(core.getInput('issue_number'));
            const { data: issue } = await github.rest.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number
            });
            core.setOutput('title', issue.title);
            core.setOutput('body', issue.body || '');
            core.setOutput('number', issue_number);

      - name: Parse module id from title
        id: parse
        run: |
          TITLE="${{ steps.issue.outputs.title }}"
          # 例: "[模組] M-DEMO-001 Demo Module" -> 抓 M-DEMO-001
          echo "TITLE=$TITLE"
          MOD_ID=$(echo "$TITLE" | grep -oE 'M-[A-Z]+-[0-9]+' || true)
          if [ -z "$MOD_ID" ]; then
            echo "No module id found in title; default to M-UNSET-000"
            MOD_ID="M-UNSET-000"
          fi
          echo "mod_id=$MOD_ID" >> $GITHUB_OUTPUT

      - name: Create scaffold files
        run: |
          MOD="${{ steps.parse.outputs.mod_id }}"
          mkdir -p "modules/${MOD}"
          cat > "modules/${MOD}/manifest.json" <<'JSON'
          {
            "id": "M-UNSET-000",
            "name": "New Module",
            "version": "1.0.0",
            "capabilities": ["todo.fill.me"],
            "inputs": {},
            "outputs": {},
            "dependencies": [],
            "conflicts": [],
            "resources": { "bundle_kb": 0, "cpu_ms": 0, "mem_mb": 0 },
            "policy": { "age": "all", "license": "MIT", "offline_ok": true },
            "tests": [
              { "name": "example", "input": {}, "expect": {} },
              { "name": "example-2", "input": {}, "expect": {} }
            ]
          }
          JSON

      - name: Commit & push
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add -A
          git commit -m "chore(scaffold): create module folder from issue #${{ steps.issue.outputs.number }}" || echo "nothing to commit"
          git push
