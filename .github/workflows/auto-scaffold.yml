name: Auto Scaffold Module

on:
  issues:
    types: [opened]

permissions:
  contents: write
  issues: write

concurrency:
  group: scaffold-${{ github.event.issue.number }}
  cancel-in-progress: false

jobs:
  scaffold:
    if: contains(toJson(github.event.issue.labels.*.name), 'module-proposal') # 只處理帶 module-proposal 標籤的 Issue
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Parse category & slug
        id: prep
        shell: bash
        run: |
          set -euo pipefail
          TITLE="${{ github.event.issue.title }}"
          BODY="${{ github.event.issue.body }}"
          NUMBER="${{ github.event.issue.number }}"
          # 從 meta 讀 category（/module-proposal 會放在 body 的 meta 區塊）
          CATEGORY=$(printf "%s" "$BODY" | awk -F': ' '/^[-*] category:/ {print tolower($2); exit}' | tr -d '\r')
          if [ -z "$CATEGORY" ]; then CATEGORY="ideas"; fi

          SLUG="$(echo "$TITLE" | tr '[:upper:]' '[:lower:]' | sed -E 's/[^a-z0-9]+/-/g;s/^-+|-+$//g')"
          DIR="modules/${CATEGORY}/${SLUG}"

          echo "category=$CATEGORY" >> "$GITHUB_OUTPUT"
          echo "slug=$SLUG" >> "$GITHUB_OUTPUT"
          echo "dir=$DIR" >> "$GITHUB_OUTPUT"

      - name: Idempotent check
        shell: bash
        run: |
          if [ -d "${{ steps.prep.outputs.dir }}" ]; then
            echo "Module already exists, skip scaffold."
            exit 0
          fi

      - name: Scaffold files
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p "${{ steps.prep.outputs.dir }}"
          FILE="${{ steps.prep.outputs.dir }}/module.json"
          BODY_JSON=$(printf '%s' "${{ github.event.issue.body }}" | jq -R -s '.')
          cat > "$FILE" <<EOF
          {
            "name": "${{ github.event.issue.title }}",
            "slug": "${{ steps.prep.outputs.slug }}",
            "category": "${{ steps.prep.outputs.category }}",
            "source": "issue",
            "issue_number": ${{ github.event.issue.number }},
            "createdBy": "${{ github.actor }}",
            "createdAt": "${{ github.event.issue.created_at }}",
            "body": $BODY_JSON
          }
          EOF

      - name: Commit & push
        shell: bash
        run: |
          set -e
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git add modules/
          git commit -m "scaffold: ${{ steps.prep.outputs.category }}/${{ steps.prep.outputs.slug }} from issue #${{ github.event.issue.number }}" || echo "No changes to commit"
          git push

      - name: Comment back (success)
        uses: actions/github-script@v7
        with:
          script: |
            const branch = context.payload.repository.default_branch || 'main';
            const category = '${{ steps.prep.outputs.category }}';
            const slug = '${{ steps.prep.outputs.slug }}';
            const url = `https://github.com/${context.repo.owner}/${context.repo.repo}/tree/${branch}/modules/${category}/${slug}`;
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.issue.number,
              body: `✅ 模組已建立：\n- 類別：**${category}**\n- 路徑：\`modules/${category}/${slug}\`\n- 連結：${url}`
            });

      - name: Comment back (failure)
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.issue.number,
              body: "❌ 自動化失敗，請查看此 workflow 的日誌（Actions）。"
            });
